

Start new chat
Projects
Starred
Architecting a Club-Themed Todo App
Experienced PHP & WordPress Developer Seeks Hybrid Role
Improving Outdated Codebase and Resistant Engineering Culture
Organizing Development Wiki Content
Recents
Optimizing High-Traffic Custom APIs
Building Configuration Menus for AI Assistant
Troubleshooting Module.json Setup
Senior Software Engineer Technical Quiz
Create a "Hello World" Foundry VTT Module
Foundry VTT v12 API Documentation
Optimizing Resume for Senior Full Stack Engineer Role
Experienced Senior Engineer Seeks Hybrid Role in Portland
View all
Professional plan

JP
plazajosue2@gmail.com
Help & support
[Hobby] DND AI GM Assistant

Building Configuration Menus for AI Assistant



JP
Okay I successfully got the package owrking that just says hello world in the console. Next, help me think of that next MVP milestone for this project. Probably create menus right? because we need to this tool to have a config menu where we can add details about the world for the ai assistant


Yes, creating configuration menus would be a great next milestone! This will be essential for storing API keys and world context that the AI assistant will need. Let me help you plan this out.

For an MVP configuration menu, we should focus on:

A module settings menu for:
API key configuration for different LLM providers
Default system prompt/context about the campaign world
Basic preferences like response length, creativity settings, etc.
A dedicated configuration FormApplication that can:
Show more detailed settings
Allow for saving larger amounts of world context
Configure specific behaviors for different aspects (NPCs, items, journal entries)
Let me help you create the basic settings first. We'll start by adding module settings that will be accessible through Foundry's configuration panel.


AI DM Assistant Settings
Click to open code
This sets up the basic settings infrastructure for your module. A few key points about what I've included:

All settings are scoped to "world" and restricted to GM only (where appropriate) since these are sensitive settings that should be controlled at the game level.
API keys are stored as strings and are restricted to GM access.
I've included some basic configuration options like creativity level and max tokens that will be useful for controlling AI responses.
The World Context setting will allow GMs to provide basic information about their campaign world, though we'll want to expand this with a proper FormApplication later for more detailed configuration.
Next, we should create a more comprehensive configuration menu using FormApplication. This will give us more control over the UI and allow for more complex settings. Would you like me to help you set that up next?

This FormApplication could include:

Tabs for different types of settings (API, World Context, Behavior)
Text areas for longer form content
More sophisticated controls for AI behavior
Test connection buttons for API verification
Let me know if you'd like to proceed with creating the FormApplication, or if you'd like to modify the basic settings first!

 Copy
Retry


JP
what would module.js be?


Let me help you create the main module.js file that will serve as the entry point for your module. This will set up the basic structure and incorporate the settings we just created.


Main Module File
Click to open code
This module.js file sets up several key components:

Initialization Hooks:
init hook to initialize settings
ready hook to check version compatibility and register with Dev Mode
UI Integration:
Adds a new control button to the scene controls with tools for:
Opening the configuration
Generating NPCs
Generating Items
Adds an AI Assist button to the Journal Directory
Socket Setup:
Sets up socket handling for client-server communication
This will be important for handling API calls through the GM client
Version Checking:
Ensures the module is running on Foundry V12
Shows an error notification if version requirements aren't met
Debug Support:
Registers with Dev Mode if available
Exports the AIDMAssistant class to global scope for debugging
The module adds several placeholder buttons that we'll implement functionality for later:

Scene controls for accessing common AI assistant features
Journal directory button for AI-assisted journal entry creation
Configuration access
Would you like me to help you implement any of these specific features next? We could:

Create the configuration FormApplication
Implement the NPC generation dialog
Set up the journal entry assistance
Add the item generation functionality
Let me know which direction you'd like to go next!

 Copy
Retry


JP
wait so that AIDMAssistant is in settings.js?


Yes! For better organization, we should split these into separate files. Let me show you how the file structure should look and how to properly set up the imports/exports:


Module Structure
Click to open code
Now let's update settings.js to properly export the class:


settings.js
Click to open code
And then update module.js to import the class:


module.js
Click to open code
You'll also need to update your module.json to specify these as ES modules:


module.json
Click to open code
The key changes here are:

We're using esmodules instead of scripts in module.json because we're using ES6 modules with import/export
We're exporting the AIDMAssistant class from settings.js
We're importing it in module.js
This gives us a cleaner organization where:

settings.js handles all the settings-related code
module.js handles the module initialization and UI setup
We'll add config.js later for the FormApplication
Would you like me to help you create the FormApplication next in config.js? Or would you like to test this current setup first?

 Copy
Retry


JP
never use esmodules


Ah, you're right - for simplicity and compatibility, let's stick with regular scripts. Let me revise the module.json and the file organization to use traditional scripts instead of ES modules.


module.json
Click to open code
Now let's update settings.js to not use export:


settings.js
Click to open code
And update module.js to remove the import:


module.js
Click to open code
The key changes are:

Removed all import/export syntax
In module.json, changed esmodules to scripts and listed both files
Listed settings.js before module.js in the scripts array to ensure the AIDMAssistant class is defined before it's used
The AIDMAssistant class is now available globally
The file structure remains similar, just without the ES modules:


Copy
ai-dm-assistant/
├── module.json
├── scripts/
│   ├── settings.js
│   ├── module.js
│   └── config.js        # We'll create this next for the FormApplication
├── styles/
│   └── ai-dm.css
├── templates/
│   └── config.hbs      # We'll create this next for the FormApplication
└── languages/
    └── en.json
Would you like me to help you create the FormApplication for the configuration window next?

 Copy
Retry


JP
Okay so we successfully have a settings page and that looks great. I added the OpenAI key to it. But on this code block game.socket.on(module.${AIDMAssistant.ID}, (data) => {   if (!game.user.isGM) return;      // TODO: Handle different socket events   switch (data.type) {       case 'requestApiCall':           // Handle API calls           break;       case 'generateContent':           // Handle content generation           break;       default:           console.warn('AI DM Assistant | Unknown socket event:', data.type);   } }); I get an errot hat game.socket is undefined so I don't know if that's important right now. The next thing we should probably do is make longer inputs in the settings so I can write out all the detail about this game world so that when we send requests to openAI, it can keep all of that as context. Then, how exactly will we have AI create journal entries? how do we make it do that? I mean, I get that we will want to take its response to create our own journal entries right? but what make a diagram to help me understand how this will work


Let me help explain the flow and then create a diagram. First, for the game.socket error - we should move that into the 'ready' hook since sockets aren't initialized during 'init'.

Let me first create a mermaid diagram to show the high-level flow of how journal entry generation will work:


Untitled
Click to open diagram
For the world context settings, let's create a proper FormApplication that will give us more space for input. Here's how we can create a configuration window:


Untitled
Click to open code
And the corresponding template:


Untitled
Click to open code
To implement journal entry creation, we'll need:

A method to handle the API call:

Untitled
Click to open code
A dialog for entering the prompt and creating the journal entry:

Untitled
Click to open code
The flow would work like this:

GM clicks the AI Assist button in the journal directory
The JournalGenerationDialog opens
GM enters what they want to generate
The module combines their prompt with the saved world context
It sends this to OpenAI's API
When it gets the response, it creates a new journal entry with the generated content
The GM can then edit this journal entry like any other
Would you like me to help you implement any specific part of this flow? We can start with:

Setting up the larger world context configuration window
Implementing the API calls
Creating the journal generation dialog
Also, regarding the game.socket error - we should move that code into the 'ready' hook. Would you like me to show you how to fix that as well?

 Copy
Retry


JP
No that's fine I fixed it. So is the world context just a blob text field in the settings? just a big paragraph?


Yes, currently it's just a big text field in the settings, but we can make it much better! The settings menu isn't great for large amounts of text, which is why I suggested creating a dedicated FormApplication with tabs. This would let us organize the world context into more useful sections like:

General World Overview
Major Factions/Organizations
Important NPCs
Current Plot Points
Locations of Interest
Let me help set that up. We can create a nicer configuration window that will be much more user-friendly than a single blob of text.

Would you like me to show you how to create this enhanced configuration window with separate sections for different types of world context? This would be much more organized and easier to maintain than a single large text field.

Also, we could even make it save each section separately in the settings, which would make it easier to reference specific parts of the context when making different types of AI requests (e.g., only sending NPC context when generating NPCs).

Would you like me to show you how to implement this more structured approach?

 Copy
Retry


JP
Yes, let's do that


I'll help you create a better structured configuration window for the world context. First, let's update our settings class to handle multiple context sections:


settings.js
Click to open code
Now let's create a new FormApplication for managing these context sections:


config.js
Click to open code
And the corresponding template:


templates/config.hbs
Click to open code
Add some basic styling:


styles/ai-dm.css
Click to open code
Finally, update your module.js to include the config class and add a button to open it. Add this to your scripts list in module.json:

json

Copy
"scripts": [
    "scripts/settings.js",
    "scripts/config.js",
    "scripts/module.js"
]
Then in your module.js, update the config button click handler to:

javascript

Copy
onClick: () => {
    new AIDMConfig().render(true);
}
This gives you:

Separate tabs for different aspects of your world
Better organization of content
A preview button to see how all the context comes together
Proper separation of concerns between settings and configuration
A much nicer UI for entering large amounts of text
When making API calls, you can use AIDMAssistant.getAllContext() to get all the context formatted nicely, or access individual sections if you only need specific context (like just NPCs for character generation).

Would you like me to explain any part of this in more detail or help you implement it?

 Copy
Retry


JP
Yes fundamentally explain to me what is happening. what is a formApplication, why a config js, where does the GM go to open this form? how is the data saved on the data layer


Let me break this down fundamentally:

What is a FormApplication?
FormApplication is a built-in Foundry VTT class that provides a window interface for collecting and saving data
Think of it like a popup window with form fields that can save data back to Foundry
It handles all the basic window functionality (dragging, resizing, closing) for you
Common examples in Foundry are the Actor sheet, Item sheet, etc.
Why config.js?
We split code into different files for organization
settings.js handles the data layer (where/how data is stored)
config.js handles the UI layer (how users interact with that data)
This separation makes the code easier to maintain
Where does the GM open this form? Remember in module.js we added this button to the scene controls:
javascript

Copy
{
    name: 'ai-config',
    title: 'Configure AI Assistant',
    icon: 'fas fa-cog',
    button: true,
    onClick: () => {
        new AIDMConfig().render(true);
    }
}
This adds a button to Foundry's left sidebar
When clicked, it creates a new instance of our AIDMConfig form and renders it
The GM clicks the robot icon in the left toolbar, then clicks the config button
How is the data saved? Let's follow the data flow:
javascript

Copy
// When the form loads:
getData(options) {
    return {
        // Gets data from settings using game.settings.get
        overview: game.settings.get(AIDMAssistant.ID, AIDMAssistant.SETTINGS.WORLD_OVERVIEW),
        factions: game.settings.get(AIDMAssistant.ID, AIDMAssistant.SETTINGS.MAJOR_FACTIONS),
        // etc...
    };
}

// When the form saves:
async _updateObject(event, formData) {
    // Takes the form data and saves it back to settings using game.settings.set
    for (const [key, value] of Object.entries(formData)) {
        let settingKey = // ... converts form field name to setting key
        await game.settings.set(AIDMAssistant.ID, settingKey, value);
    }
}
The data flow is:

Settings are registered in settings.js during initialization
FormApplication loads those settings when opened
User edits the form
When saved, FormApplication writes back to those settings
Settings are persisted in Foundry's database
Here's a visual of how it all connects:


Untitled
Click to open diagram
The key benefits of using FormApplication:

Built-in window management
Automatic form data handling
Tabs and organized layout
Consistent with Foundry's UI style
Would you like me to explain any part of this in more detail? Or would you like to see how to implement a specific part?

 Copy
Retry


JP
So is1 some world information is saved in the settings and some in this config formApplication? or is it all in the formApplication and it's just saved in game.settings?


It's all saved in game.settings - the FormApplication is just a nicer UI for interacting with those settings. Think of it this way:

game.settings is the data layer - it's where all the data is actually stored in Foundry's database
FormApplication is just a UI layer - it's a prettier way to view and edit those settings
So when we have:

javascript

Copy
// In settings.js
game.settings.register(this.ID, this.SETTINGS.WORLD_OVERVIEW, {
    scope: "world",
    config: false,  // This hides it from the regular settings menu
    type: String,
    default: ""
});

// In config.js (FormApplication)
getData(options) {
    return {
        overview: game.settings.get(AIDMAssistant.ID, AIDMAssistant.SETTINGS.WORLD_OVERVIEW)
    };
}
The FormApplication is just reading from and writing to game.settings, but providing a better interface than the default settings menu (which is designed for simple inputs like checkboxes and short text fields).

We're using both:

Regular settings menu (game.settings with config: true) for simple things like API keys
FormApplication for the complex world context data (but it's still stored in game.settings, just hidden from the regular menu with config: false)
It's like having two different ways to edit the same data:

Regular settings menu for simple stuff
Our custom FormApplication for the complex stuff that needs a better UI
But all the data lives in the same place: game.settings

 Copy
Retry


Claude can make mistakes. Please double-check responses.



No file chosen

3.5 Sonnet

Choose style

styles/ai-dm.css

.aidm-config .window-content {
    padding: 8px;
}

.aidm-config .tabs {
    margin-bottom: 8px;
    border-bottom: 1px solid #666;
}

.aidm-config .tabs .item {
    padding: 4px 8px;
    margin: 0 4px;
    border-radius: 4px 4px 0 0;
}

.aidm-config .tabs .item.active {
    background: rgba(0, 0, 0, 0.1);
    border: 1px solid #666;
    border-bottom: none;
}

.aidm-config textarea {
    min-height: 300px;
    font-family: inherit;
    border: 1px solid #666;
    padding: 4px;
    resize: vertical;
}

.aidm-config .notes {
    margin-bottom: 8px;
    font-style: italic;
    color: #666;
}

.aidm-config .sheet-footer {
    margin-top: 8px;
    gap: 8px;
}

.aidm-config .sheet-footer button {
    flex: 1;
}
Last edited 6 minutes ago



Publish
Building Configuration Menus for AI Assistant - Claude

